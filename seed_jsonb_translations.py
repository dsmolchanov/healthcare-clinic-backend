"""
Seed JSONB i18n translations for healthcare services

This script populates the name_i18n and description_i18n JSONB fields
with translations for common dental services.

Usage:
    python3 seed_jsonb_translations.py [--clinic-id CLINIC_ID] [--dry-run]
"""

import asyncio
import argparse
import logging
import json
import os
from typing import Dict, List
from dotenv import load_dotenv
from app.database import create_supabase_client
from app.config import get_redis_client
from app.services.clinic_data_cache import ClinicDataCache
from app.utils.i18n_helpers import merge_translations

# Load environment variables
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Translation mappings for common dental services
# Structure: {service_name_lower: {"name": {lang: text}, "description": {lang: text}}}
SERVICE_TRANSLATIONS = {
    # Fillings
    "composite filling": {
        "name": {"ru": "–ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞", "es": "Empaste de composite", "pt": "Obtura√ß√£o de resina composta", "he": "◊°◊™◊ô◊û◊™ ◊ß◊ï◊û◊§◊ï◊ñ◊ô◊ò"},
        "description": {"ru": "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–∞ —Å–≤–µ—Ç–æ–æ—Ç–≤–µ—Ä–∂–¥–∞–µ–º—ã–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º", "es": "Empaste dental con material composite fotopolimerizable", "pt": "Obtura√ß√£o dent√°ria com material de resina composta fotopolimeriz√°vel"}
    },
    "filling": {
        "name": {"ru": "–ü–ª–æ–º–±–∞", "es": "Empaste", "pt": "Obtura√ß√£o", "he": "◊°◊™◊ô◊û◊î"},
        "description": {"ru": "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä–∏–æ–∑–Ω–æ–π –ø–æ–ª–æ—Å—Ç–∏", "es": "Empaste de cavidad cariosa", "pt": "Obtura√ß√£o de cavidade cariosa"}
    },
    "resin filling": {
        "name": {"ru": "–ü–ª–æ–º–±–∞ –∏–∑ —Å–º–æ–ª—ã", "es": "Empaste de resina", "pt": "Obtura√ß√£o de resina"},
        "description": {"ru": "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π —Å–º–æ–ª–æ–π", "es": "Empaste dental con resina compuesta", "pt": "Obtura√ß√£o dent√°ria com resina composta"}
    },

    # Cleaning
    "dental cleaning": {
        "name": {"ru": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "es": "Limpieza dental profesional", "pt": "Limpeza dental profissional", "he": "◊†◊ô◊ß◊ï◊ô ◊©◊ô◊†◊ô◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô"},
        "description": {"ru": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "es": "Limpieza dental profesional e higiene oral", "pt": "Limpeza dental profissional e higiene oral"}
    },
    "cleaning": {
        "name": {"ru": "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "es": "Limpieza dental", "pt": "Limpeza dental", "he": "◊†◊ô◊ß◊ï◊ô ◊©◊ô◊†◊ô◊ô◊ù"},
        "description": {"ru": "–ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "es": "Limpieza e higiene dental", "pt": "Limpeza e higiene dental"}
    },
    "prophylaxis": {
        "name": {"ru": "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞", "es": "Profilaxis dental", "pt": "Profilaxia dent√°ria"},
        "description": {"ru": "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∑—É–±–æ–≤", "es": "Profilaxis y pulido dental profesional", "pt": "Profilaxia e polimento dental profissional"}
    },

    # Whitening
    "teeth whitening": {
        "name": {"ru": "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤", "es": "Blanqueamiento dental", "pt": "Clareamento dental", "he": "◊î◊ú◊ë◊†◊™ ◊©◊ô◊†◊ô◊ô◊ù"},
        "description": {"ru": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤", "es": "Blanqueamiento dental profesional", "pt": "Clareamento dental profissional"}
    },
    "whitening": {
        "name": {"ru": "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ", "es": "Blanqueamiento", "pt": "Clareamento"},
        "description": {"ru": "–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤", "es": "Blanqueamiento cosm√©tico dental", "pt": "Clareamento cosm√©tico dental"}
    },

    # Consultation
    "consultation": {
        "name": {"ru": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "es": "Consulta", "pt": "Consulta", "he": "◊ô◊ô◊¢◊ï◊•"},
        "description": {"ru": "–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ—Å–º–æ—Ç—Ä", "es": "Consulta inicial y examen", "pt": "Consulta inicial e exame"}
    },
    "dental exam": {
        "name": {"ru": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä", "es": "Examen dental", "pt": "Exame dent√°rio"},
        "description": {"ru": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä", "es": "Examen dental completo", "pt": "Exame dent√°rio completo"}
    },

    # X-Ray
    "x-ray": {
        "name": {"ru": "–†–µ–Ω—Ç–≥–µ–Ω", "es": "Radiograf√≠a", "pt": "Radiografia", "he": "◊¶◊ô◊ú◊ï◊ù ◊®◊†◊ò◊í◊ü"},
        "description": {"ru": "–†–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –∑—É–±–æ–≤", "es": "Radiograf√≠a dental", "pt": "Radiografia dent√°ria"}
    },
    "panoramic x-ray": {
        "name": {"ru": "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π —Å–Ω–∏–º–æ–∫", "es": "Radiograf√≠a panor√°mica", "pt": "Radiografia panor√¢mica"},
        "description": {"ru": "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ —á–µ–ª—é—Å—Ç–∏", "es": "Radiograf√≠a panor√°mica de los maxilares", "pt": "Radiografia panor√¢mica dos maxilares"}
    },

    # Root Canal
    "root canal": {
        "name": {"ru": "–õ–µ—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤", "es": "Endodoncia", "pt": "Tratamento de canal", "he": "◊ò◊ô◊§◊ï◊ú ◊©◊ï◊®◊©"},
        "description": {"ru": "–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", "es": "Tratamiento endod√≥ntico de conductos radiculares", "pt": "Tratamento endod√¥ntico de canais radiculares"}
    },
    "endodontic treatment": {
        "name": {"ru": "–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ", "es": "Tratamiento endod√≥ntico", "pt": "Tratamento endod√¥ntico"},
        "description": {"ru": "–õ–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑—É–±–∞", "es": "Tratamiento de los conductos radiculares", "pt": "Tratamento dos canais radiculares"}
    },

    # Crown
    "crown": {
        "name": {"ru": "–ö–æ—Ä–æ–Ω–∫–∞", "es": "Corona", "pt": "Coroa", "he": "◊õ◊™◊®"},
        "description": {"ru": "–ó—É–±–Ω–∞—è –∫–æ—Ä–æ–Ω–∫–∞", "es": "Corona dental", "pt": "Coroa dent√°ria"}
    },
    "dental crown": {
        "name": {"ru": "–ó—É–±–Ω–∞—è –∫–æ—Ä–æ–Ω–∫–∞", "es": "Corona dental", "pt": "Coroa dent√°ria"},
        "description": {"ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑—É–±–Ω–æ–π –∫–æ—Ä–æ–Ω–∫–∏", "es": "Colocaci√≥n de corona dental", "pt": "Coloca√ß√£o de coroa dent√°ria"}
    },

    # Extraction
    "extraction": {
        "name": {"ru": "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞", "es": "Extracci√≥n dental", "pt": "Extra√ß√£o dent√°ria", "he": "◊¢◊ß◊ô◊®◊™ ◊©◊ü"},
        "description": {"ru": "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞", "es": "Extracci√≥n de diente", "pt": "Extra√ß√£o de dente"}
    },
    "tooth extraction": {
        "name": {"ru": "–≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑—É–±–∞", "es": "Extracci√≥n de diente", "pt": "Extra√ß√£o de dente"},
        "description": {"ru": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞", "es": "Extracci√≥n quir√∫rgica de diente", "pt": "Extra√ß√£o cir√∫rgica de dente"}
    },

    # Implant
    "implant": {
        "name": {"ru": "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è", "es": "Implante", "pt": "Implante", "he": "◊©◊™◊ú"},
        "description": {"ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑—É–±–Ω–æ–≥–æ –∏–º–ø–ª–∞–Ω—Ç–∞", "es": "Colocaci√≥n de implante dental", "pt": "Coloca√ß√£o de implante dent√°rio"}
    },
    "dental implant": {
        "name": {"ru": "–ó—É–±–Ω–æ–π –∏–º–ø–ª–∞–Ω—Ç", "es": "Implante dental", "pt": "Implante dent√°rio"},
        "description": {"ru": "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è –∑—É–±–∞", "es": "Implantolog√≠a dental", "pt": "Implantodontia"}
    },

    # Orthodontics
    "braces": {
        "name": {"ru": "–ë—Ä–µ–∫–µ—Ç—ã", "es": "Ortodoncia", "pt": "Aparelho ortod√¥ntico", "he": "◊í◊©◊®"},
        "description": {"ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–µ–∫–µ—Ç-—Å–∏—Å—Ç–µ–º—ã", "es": "Colocaci√≥n y ajuste de ortodoncia", "pt": "Coloca√ß√£o e ajuste de aparelho ortod√¥ntico"}
    },
}


async def seed_jsonb_translations(
    supabase,
    clinic_id: str = None,
    dry_run: bool = False
) -> Dict[str, int]:
    """
    Seed JSONB i18n fields with translations

    Args:
        supabase: Supabase client
        clinic_id: Optional clinic ID to filter services
        dry_run: If True, don't actually update database

    Returns:
        Dict with counts of updated services
    """
    stats = {
        "total_services": 0,
        "matched_services": 0,
        "updated_services": 0,
        "skipped_services": 0
    }

    try:
        # Fetch all active services
        query = supabase.schema('healthcare').table('services').select('*').eq('active', True)
        if clinic_id:
            query = query.eq('clinic_id', clinic_id)

        result = query.execute()
        services = result.data if result.data else []
        stats["total_services"] = len(services)

        logger.info(f"üìä Found {len(services)} active services to process")

        for service in services:
            service_name = service['name'].lower().strip()

            # Check if we have translations for this service
            if service_name in SERVICE_TRANSLATIONS:
                translations = SERVICE_TRANSLATIONS[service_name]
                stats["matched_services"] += 1

                # Check if already has JSONB translations
                existing_name_i18n = service.get('name_i18n') or {}
                existing_desc_i18n = service.get('description_i18n') or {}

                # Skip if already has translations in JSONB
                if existing_name_i18n and len(existing_name_i18n) > 0:
                    logger.info(f"‚è≠Ô∏è  Skipping '{service['name']}' - already has JSONB translations")
                    stats["skipped_services"] += 1
                    continue

                # Build JSONB translations
                name_i18n = translations.get('name', {})
                description_i18n = translations.get('description', {})

                # Add English from existing name/description
                name_i18n['en'] = service['name']
                if service.get('description'):
                    description_i18n['en'] = service['description']

                if dry_run:
                    logger.info(f"üîç [DRY RUN] Would update '{service['name']}' with JSONB translations:")
                    logger.info(f"   name_i18n: {json.dumps(name_i18n, ensure_ascii=False)}")
                    logger.info(f"   description_i18n: {json.dumps(description_i18n, ensure_ascii=False)}")
                    stats["updated_services"] += 1
                else:
                    # Update the service with JSONB translations
                    logger.info(f"‚úÖ Updating '{service['name']}' with JSONB translations")

                    update_data = {
                        'name_i18n': name_i18n,
                        'description_i18n': description_i18n
                    }

                    supabase.schema('healthcare').table('services').update(
                        update_data
                    ).eq('id', service['id']).execute()

                    stats["updated_services"] += 1
                    logger.info(f"   ‚úì Updated service ID: {service['id']}")
                    logger.info(f"   ‚úì Languages: {list(name_i18n.keys())}")

        logger.info(f"\nüìà Summary:")
        logger.info(f"   Total services: {stats['total_services']}")
        logger.info(f"   Matched for translation: {stats['matched_services']}")
        logger.info(f"   Updated: {stats['updated_services']}")
        logger.info(f"   Skipped (already translated): {stats['skipped_services']}")

        return stats

    except Exception as e:
        logger.error(f"‚ùå Error seeding translations: {e}")
        raise


async def invalidate_service_cache(clinic_id: str = None):
    """
    Invalidate service cache to force reload with new JSONB i18n fields

    Args:
        clinic_id: Optional clinic ID to invalidate (if None, invalidates all)
    """
    try:
        redis = get_redis_client()
        cache = ClinicDataCache(redis)
        supabase = create_supabase_client()

        if clinic_id:
            cache.invalidate_services(clinic_id)
            logger.info(f"üóëÔ∏è  Invalidated cache for clinic {clinic_id}")
        else:
            # Get all active clinics
            result = supabase.table('clinics').select('id').eq('is_active', True).execute()
            clinics = result.data if result.data else []

            logger.info(f"üóëÔ∏è  Invalidating cache for {len(clinics)} clinics...")
            for clinic in clinics:
                cache.invalidate_services(clinic['id'])

            logger.info(f"‚úÖ Invalidated cache for all {len(clinics)} clinics")

    except Exception as e:
        logger.error(f"‚ùå Error invalidating cache: {e}")
        raise


async def main():
    parser = argparse.ArgumentParser(
        description="Seed JSONB i18n translations for healthcare services"
    )
    parser.add_argument(
        '--clinic-id',
        type=str,
        help='Specific clinic ID to process (default: all clinics)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Preview changes without updating database'
    )
    parser.add_argument(
        '--skip-cache-invalidation',
        action='store_true',
        help='Skip cache invalidation step'
    )

    args = parser.parse_args()

    logger.info("üöÄ Starting JSONB translation seeding...")
    if args.dry_run:
        logger.info("‚ö†Ô∏è  DRY RUN MODE - No changes will be made")

    supabase = create_supabase_client()

    # Seed translations
    stats = await seed_jsonb_translations(
        supabase,
        clinic_id=args.clinic_id,
        dry_run=args.dry_run
    )

    # Invalidate cache (unless skipped or dry run)
    if not args.dry_run and not args.skip_cache_invalidation:
        logger.info("\nüîÑ Invalidating service cache...")
        await invalidate_service_cache(clinic_id=args.clinic_id)
        logger.info("‚úÖ Cache invalidated - services will reload with JSONB i18n fields")

    logger.info("\n‚úÖ JSONB translation seeding complete!")

    if args.dry_run:
        logger.info("\nüí° To apply these changes, run without --dry-run flag")


if __name__ == "__main__":
    asyncio.run(main())
